# Let's load our dataset and call it data
dataold=read.table('DATA_3.01_CREDIT.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
datanew=read.table('DATA_4.01_CREDIT2.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
setwd("~/aarjan/coursera/data")
# Let's load our dataset and call it data
dataold=read.table('DATA_3.01_CREDIT.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
datanew=read.table('DATA_4.01_CREDIT2.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
linreg=lm(Rating~.,data=dataold) # Estimate a linear regression model of Rating as a function of everything else.
predcreditscore = predict(linreg,newdata=datanew,type="response")
# To clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load our dataset
dataold=read.table('DATA_3.02_HR2.csv', header = T,sep=',') # The function read.table enables us to read flat files such as .csv files
datanew=read.table('DATA_4.02_HR3.csv', header = T,sep=',') # The new dataset on which we want to make the prediction
logreg = glm(left ~ ., family=binomial(logit), data=dataold) # Estimate the drivers of attrition
probaToLeave=predict(logreg,newdata=datanew,type="response") # Make predictions on the out-of-sample data
predattrition = data.frame(probaToLeave) # Structure the prediction output in a table
View(predattrition[order(predattrition$probaToLeave,decreasing = FALSE)])
View(predattrition)
View(predattrition[order(predattrition$probaToLeave,decreasing = FALSE)])
predattrition[order(predattrition$probaToLeave,decreasing = FALSE)]
predattrition$performance=datanew$LPE # Add a column to the predattrition dataframe containing the performance
View(predattrition) # View the predattrition dataframe
plot(predattrition$probaToLeave,predattrition$performance)
predattrition$priority=predattrition$performance*predattrition$probaToLeave
View(predattrition)
View(predattrition[predattrition$priority > 0.9])
View(predattrition[predattrition$priority>0.9])
predattrition[predattrition$priority>0.9]
View(predattrition[predattrition$priority>0.9,])
View(predattrition[predattrition$performance>0.9,])
a = predattrition[predattrition$performance>0.9,]
View(predattrition[min(predattrition$probaToLeave)])
View(predattrition[min(predattrition$probaToLeave),])
summary(predattrition[predattrition$performance>0.9,])
# to clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load the data
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
linregmodel = lm(lifetime~.-broken,data=data)  # Build a linear regression model
summary(linregmodel) # The summary() function shows the output of your model
install.packages("survival") # Install the survival package to your computer
lm?
\c
?lm
data.frame(summary(linregmodel))
summary(linregmodel)@pressureInd
summary(linregmodel)@moistureInd$coefficients
sum.vec<-summary(linregmodel)
sum.vec
names(sum.vec)
sum.vec$coefficients
names(sum.vec$coefficients)
sum.vec$coefficients[1]
typeof(sum.vec$coefficients)
sum.vec$coefficients[1,2]
# To clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load our dataset
dataold=read.table('DATA_3.02_HR2.csv', header = T,sep=',') # The function read.table enables us to read flat files such as .csv files
datanew=read.table('DATA_4.02_HR3.csv', header = T,sep=',') # The new dataset on which we want to make the prediction
logreg = glm(left ~ ., family=binomial(logit), data=dataold) # Estimate the drivers of attrition
summary(logreg)
# to clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load the data
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
linregmodel = lm(lifetime~.-broken-team-provider,data=data)
summary(linregmodel)
summary(lm(lifetime~.-broken,data=data))
summary(lm(lifetime~.,data=data))
data[1,2]
data[1,]
data$lifetime
d = data[data$lifetime]
data[,1]
data[1,]
data[,1,2]
data["broken"]
data[c("broken")]
data[c("broken","team")]
str(data)
d = data[c("lifetime","pressureInd","moistureInd",temperatureInd)]
d = data[c("lifetime","pressureInd","moistureInd","temperatureInd")]
summary(lm(lifetime~.,data=d))
# Let's load the data
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
# to clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
linregmodel = lm(lifetime~.-broken,data=data)  # Build a linear regression model
# Let's load the data
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(linregmodel) # The summary() function shows the output of your model
linregmodel = lm(lifetime~.-broken,data=data)  # Build a linear regression model
summary(linregmodel) # The summary() function shows the output of your model
dependantvars = Surv(data$lifetime, data$broken) # choose the dependant variables to be used in the survival regression model with the Surv() function
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data) # Create your survival regression model
summary(survreg)  # The summary() function shows the output of your model
Ebreak=predict(survreg, newdata=data, type="quantile", p=.5) # Make predictions based on the model. Here we estimate the median lifetime as the expected moment of "death"
Forecast=data.frame(Ebreak) # Create a dataframe to store the ouput of Ebreak
Forecast$lifetime=data$lifetime  # Add a column in the Forecast dataframe indicating the lifetime of the piece
Forecast$broken=data$broken # Add a column in the Forecast dataframe indicating whether or not the piece is broken
Forecast$RemainingLT=Forecast$Ebreak-data$lifetime # Computed Expected Remaining Lifetime
View(Forecast) # View the complete Forecast dataframe
# to clean up the memory of your current R session run the following line
rm(list=ls(all=TRUE))
# Let's load the data
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
linregmodel = lm(lifetime~.-broken,data=data)  # Build a linear regression model
library(survival) # Load the survival package
dependantvars = Surv(data$lifetime, data$broken) # choose the dependant variables to be used in the survival regression model with the Surv() function
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data) # Create your survival regression model
summary(survreg)  # The summary() function shows the output of your model
Ebreak=predict(survreg, newdata=data, type="quantile", p=.5) # Make predictions based on the model. Here we estimate the median lifetime as the expected moment of "death"
Forecast=data.frame(Ebreak) # Create a dataframe to store the ouput of Ebreak
Forecast$lifetime=data$lifetime  # Add a column in the Forecast dataframe indicating the lifetime of the piece
Forecast$broken=data$broken # Add a column in the Forecast dataframe indicating whether or not the piece is broken
Forecast$RemainingLT=Forecast$Ebreak-data$lifetime # Computed Expected Remaining Lifetime
View(Forecast) # View the complete Forecast dataframe
Forecast=Forecast[order(Forecast$RemainingLT),] # Order the elements by Expected Remaining Lifetime
ActionsPriority=Forecast[Forecast$broken==0,] # And keep only those who are not broken yet
View(ActionsPriority) # View the output and take actions!
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd, dist="gaussian",data=data)
summary(survreg)  # The summary() function shows the output of your model
linregmodel = lm(lifetime~.-broken,data=data)  # Build a linear regression model
summary(linregmodel) # The summary() function shows the output of your model
linregmodel$fitted.values
View(linregmodel$fitted.values)
summary(linregmodel) # The summary() function shows the output of your model
?plot
